name: main

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  test:
    name: Test
    runs-on: windows-latest
    env:
      # msbuild_path: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe
      msvs_version: 2022
    steps:
      - uses: actions/checkout@v4
        with:
          show-progress: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
          cache: npm

      # npm ci 的支持缓存版本，减少在本就性能不佳的 windows runner 上的编译时间
      - name: Generate cache primary key based on nodejs's and npm's version and package-lock.json's hash
        id: version
        shell: bash
        run: |
          export LC_ALL=en_US.UTF-8
          export LANG=en_US.UTF-8
          echo "hash=node@$(node -v | grep -oP '(?<=^v)\d+')_npm@$(npm -v | grep -oP '^\d+')_package-lock@$(openssl dgst -sha3-512 package-lock.json | grep -oP '[\da-f]{128}')" >> $GITHUB_OUTPUT && cat $GITHUB_OUTPUT
      - name: Try to restore node_modules from cache
        id: cache
        uses: actions/cache/restore@v3
        with:
          path: node_modules
          key: ${{ steps.version.outputs.hash }}
      - name: Install dependencies if no cache for node_modules
        run: npm ci
        if: success() && steps.cache.outputs.cache-hit != 'true'
      - name: Save node_modules to cache
        uses: actions/cache/save@v3
        if: success() && steps.cache.outputs.cache-hit != 'true'
        with:
          path: node_modules
          key: ${{ steps.version.outputs.hash }}

      - name: Build the native modules
        run: npm run rebuild
      - name: Build the app
        run: npm run build

      - name: Get the version
        id: appVersion
        shell: bash
        run: echo "appVersion=$(jq -r .version package.json)" >> $GITHUB_OUTPUT && cat $GITHUB_OUTPUT
      - name: Show the result
        run: Get-ChildItem -Path release/ -Recurse -Force
      - name: Upload the build
        uses: actions/upload-artifact@v4
        with:
          name: Joi-Windows-${{ steps.appVersion.outputs.appVersion }}-Setup.exe
          path: release/${{ steps.appVersion.outputs.appVersion }}/Joi-Windows-${{ steps.appVersion.outputs.appVersion }}-Setup.exe
          compression-level: 0
